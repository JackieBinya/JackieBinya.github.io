<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cms on Jacqueline Binya</title>
    <link>https://jackiebinya.github.io/tags/cms/</link>
    <description>Jacqueline Binya (cms)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Apr 2020 18:42:01 +0200</lastBuildDate>
    
    <atom:link href="https://jackiebinya.github.io/tags/cms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Hugo Static Site Generator</title>
      <link>https://jackiebinya.github.io/posts/using-hugo/</link>
      <pubDate>Fri, 24 Apr 2020 18:42:01 +0200</pubDate>
      
      <guid>https://jackiebinya.github.io/posts/using-hugo/</guid>
      <description>&lt;p&gt;I recently started contributing to free and open-source software, but that&amp;rsquo;s a story for another day. So well I stumbled upon a bunch of projects with issues open which required help in either completely writing new documentation using &lt;a href=&#34;https://gohugo.io/&#34; class=&#34;article-link&#34;&gt;Hugo &lt;/a&gt; or migrating the existing documentation to Hugo. I was naturally curious why so many organizations were willing to make that shift. So I started my research and this is what I learned about Hugo.&lt;/p&gt;
&lt;h2 id=&#34;why-hugo-&#34;&gt;Why Hugo ?&lt;/h2&gt;
&lt;img src=&#34;https://media.giphy.com/media/5PSPV1ucLX31u/giphy.gif&#34; alt=&#34;Confused parrot gif&#34;&gt;
&lt;p&gt;Jekyll, VuePress, Gatsby, Gridsome, Hugo !!! Where does one honestly start ü§∑üèæ‚Äç‚ôÄÔ∏è&lt;/p&gt;
&lt;p&gt;Well Hugo, as well as the above-mentioned technologies are collectively known as static site generators. Static site generators are in layman&amp;rsquo;s terms applications which are used to create static HTML websites.&lt;/p&gt;
&lt;p&gt;Static websites display web content in the user&amp;rsquo;s web browser exactly as it is stored in the server. Hence every user who visits a static site interacts with exactly the same content. Whereas conversely we have dynamic websites which serve content on a user&amp;rsquo;s browser as it is generated by web applications. Web applications make use complex server-side calls which in turn enable dynamic content to be served to each and every user who visit the site if need be.&lt;/p&gt;
&lt;p&gt;Static site generators work by parsing content which is normally written in either &lt;a href=&#34;https://guides.github.com/features/mastering-markdown&#34; class=&#34;article-link&#34;&gt;Markdown&lt;/a&gt; and/or templating languages, layouts and other meta data and then converting all the source files into HTML. It&amp;rsquo;s important to appreciate that when ever there is a change in the source code, the static site generator re-builds the whole website all over again and uploads it to the server.&lt;/p&gt;
&lt;p&gt;Advantages of using static site generators :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better SEO: as all web content is served in simple HTML web scrapers can easily search the site.&lt;/li&gt;
&lt;li&gt;Speed: there are no calls made to external databases, static sites are served pretty fast in comparison to dynamic websites.&lt;/li&gt;
&lt;li&gt;Improved security since: static sites are independent of databases they are basically hacker-proof.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo, stands out because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Its open-source.&lt;/li&gt;
&lt;li&gt;Its incredible fast üöÄ, it is the fastest static site generator to date. Hugo is written using &lt;a href=&#34;https://golang.org/&#34;  class=&#34;article-link&#34;&gt;Golang &lt;/a&gt;, using Go makes Hugo build processes incredible fast!&lt;/li&gt;
&lt;li&gt;It has a wide variety of themes which make it easy to create a static website, you don&amp;rsquo;t have to start from scratch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far the only cons I came across when using Hugo were that to fully harness its power you have to know Go. Knowing a little bit of Go gives you so much power in tweaking up themes, which is rather important if you want to give a unique feel to your site despite it being created from a theme. I also would love to express the fact that it took me time to warp my head around how Hugo works despite coming from a solid background in front-end development. So the learning curve is quite steep.&lt;/p&gt;
&lt;h2 id=&#34;my-experiences-using-hugo&#34;&gt;My experiences using Hugo&lt;/h2&gt;
&lt;p&gt;My preferred method of learning a new technology is through watching video tutorials.
So for an intro to using Hugo for my personal blog I found the following video tutorials useful.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gSiAcyTWU3c&amp;t=510s&#34; class=&#34;article-link&#34;&gt;Building a Serverless Blog with Hugo and Netlify&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLLAZ4kZ9dFpOnyRlyS-liKL5ReHDcj4G3&#34; class=&#34;article-link&#34;&gt;Hugo - Static Site Generator | Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After going through the tutorials I followed the Hugo official &lt;a href=&#34;https://gohugo.io/getting-started/&#34; class=&#34;article-link&#34;&gt;documentation&lt;/a&gt; on getting started. My theme of choice was &lt;a href=&#34;https://themes.gohugo.io/hugo-theme-anubis/&#34; class=&#34;article-link&#34;&gt;Anubis&lt;/a&gt;, I chose it because its styling is minimalist and clean and most importantly the styling wasn&amp;rsquo;t too opinionated I had lots of room to play around and tweak the styling without having to change a lot of the original styling.&lt;/p&gt;
&lt;h2 id=&#34;other-technologies-used-in-creating-my-blog&#34;&gt;Other Technologies used in creating my blog&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://formspree.io/&#34; class=&#34;article-link&#34;&gt;FormSpree&lt;/a&gt;: is basically a delivery service, it collects form data and then sends email alerts when forms are submitted on static websites. Its integration into a static website is very easy and seamless.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com/&#34; class=&#34;article-link&#34;&gt;Github Pages &lt;/a&gt;: my site was hosted on GitHub pages, to learn more about Github Pages site hosting service read &lt;a href=&#34;https://help.github.com/en/github/working-with-github-pages/about-github-pages#user--organization-pages&#34; class=&#34;article-link&#34;&gt;this&lt;/a&gt;. Hosting a Hugo site on Github pages isn&amp;rsquo;t a straight-forward task. I advise you to check out the official documentation &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/#github-user-or-organization-pages&#34; class=&#34;article-link&#34;&gt;here&lt;/a&gt; on how that can be done.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;making-it-even-better-for-non-techies--integrating-hugo-with-cmses&#34;&gt;Making it even better for non-techies | Integrating Hugo with CMSes&lt;/h2&gt;
&lt;p&gt;Hugo can be bundled with headless content management systems like &lt;a href=&#34;https://www.datocms.com/&#34; class=&#34;article-link&#34;&gt;DatoCMS&lt;/a&gt; to enable it to be harnessed for use by users from non-technical background. Read DatoCMS official &lt;a href=&#34;https://www.datocms.com/docs/hugo&#34; class=&#34;article-link&#34;&gt;documentation&lt;/a&gt; to find out about how that can be achieved.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>